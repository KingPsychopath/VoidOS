wall = paintutils.loadImage("/void/wall")
lastclick = os.clock()
pressed = false
posx = 0
grabx = 0
windows = {}
windowid = 1
deleteWindowid = 0
voidmenu = {}
voidmenu['active'] = false
voidmenu['width'] = 4
voids = {}
voidid = 1
order = {}
textBoxOn = false
menus = {}
menui = {}
menuID = 1
menuiID = 1
currentMenuPos = 1
selectedMenu = -1
flashMenuItemID = -1

function checkUpdate()
	versionFile = fs.open("/void/version", "r")
	currentVersion = tonumber(versionFile.readLine())
	newVersion = tonumber(http.get("https://raw.github.com/Vilsol/VoidOS/master/void/version").readAll())
	if(newVersion > currentVersion)then
		return true
	end
	return false
end

function drawWallpaper()
	paintutils.drawImage(wall, 11, 6)
end

function makeWindow(width, height, name, xPos, yPos)
	windows[windowid] = {}
	windows[windowid]["width"] = width
	windows[windowid]["height"] = height
	windows[windowid]["xPos"] = xPos
	windows[windowid]["yPos"] = yPos
	windows[windowid]["name"] = name
	windows[windowid]["minimised"] = false
	ca = table.getn(windows)
	order[ca + 1] = windowid
	orderTop(windowid)
	windowid = windowid + 1
	return windowid - 1
end

function orderTop(id)
	new = {}
	count = 1
	for ik, data in pairs(windows) do
		if(ik ~= id)then
			new[count] = ik
			count = count + 1
		end
	end
	new[count] = id
	order = new
end

function drawWindow(id)
	window = windows[id]
	if(window['minimised'] == false)then
		term.setBackgroundColor(colors.blue)
		term.setTextColor(colors.white)
		term.setCursorPos(window["xPos"], window["yPos"])
		for h = 1, window['width'] + 1 do
			term.write(" ")
		end
		term.setCursorPos(window['xPos'] + 3, window['yPos'])
		term.write(window['name'])
		term.setBackgroundColor(colors.red)
		term.setCursorPos(window["xPos"], window["yPos"])
		term.write("X")
		term.setBackgroundColor(colors.lime)
		term.setCursorPos(window["xPos"] + 1, window["yPos"])
		term.write("_")
		term.setBackgroundColor(colors.lightGray)
		for x = window['xPos'], window['xPos'] + window['width'] do
			for y = window['yPos'] + 1, window['yPos'] + window['height'] do
				term.setCursorPos(x, y)
				term.write(" ")
			end
		end
	end
end

function drawWindows()
	if next(windows) == nil then else
		term.setBackgroundColor(colors.black)
		for oid, idm in pairs(order) do
			drawWindow(idm)
		end
		term.setBackgroundColor(colors.black)
	end
end

function checkWindows(xPos, yPos)
	if table.getn(windows) >= 1 then 
		for oid, id in pairs(order) do
			data = windows[id]
			if(data['minimised'] == false)then
				if(xPos >= data['xPos'] + 2 and xPos <= data['xPos'] + data['width'])then
					if(yPos == data['yPos'])then
						orderTop(id)
						return id
					end
				elseif(xPos == data['xPos'] and yPos == data['yPos'])then
					orderTop(id)
					deleteWindowid = id
					return id
				elseif(xPos == data['xPos'] + 1 and yPos == data['yPos'])then
					data['minimised'] = true
					return id
				end
			end
		end
	end
	return 0
end

function drawTaskBar()
	w, h = term.getSize()
	term.setBackgroundColor(colors.gray)
	for x = 1, w do
		term.setCursorPos(x, h)
		term.write(" ")
	end
	term.setTextColor(colors.cyan)
	if(voidmenu['active'] == false)then
		term.setBackgroundColor(colors.orange)
	else
		total = table.getn(voids)
		count = total
		term.setBackgroundColor(colors.white)
		term.setTextColor(colors.black)
		for id, data in pairs(voids) do
			if(data['flash'] == true)then
				term.setBackgroundColor(colors.red)
			else
				term.setBackgroundColor(colors.white)
			end
			term.setCursorPos(1, h - total + count - 1)
			term.write(data['name'])
			if(string.len(data['name']) < voidmenu['width'])then
				for wx = string.len(data['name']) + 1, voidmenu['width'] do
					term.setCursorPos(wx, h - total + count - 1)
					term.write(" ")
				end
			end
			count = count - 1
		end
		term.setTextColor(colors.cyan)
		term.setBackgroundColor(colors.red)
	end	
	term.setCursorPos(1, h)
	term.write("Void")
	position = 6
	for id, data in pairs(windows) do
		if data['minimised'] == true then
			term.setCursorPos(position, h)
			term.setBackgroundColor(colors.blue)
			term.write(data['name'])
			position = position + string.len(data['name']) + 1
		end
	end
end

function checkTaskBar(xPos, yPos)
	w, h = term.getSize()
	if(yPos == h)then
		if(xPos <= 4)then
			voidmenu['active'] = not voidmenu['active']
			return true
		else
			position = 6
			for id, data in pairs(windows) do
				if data['minimised'] == true then
					if(xPos >= position and xPos <= position + string.len(data['name']) - 1)then
						data['minimised'] = false
						return true
					end
					position = position + string.len(data['name']) + 1
				end
			end
		end
	else
		if(voidmenu['active'] == true)then
			total = table.getn(voids)
			count = total
			if(xPos <= voidmenu['width'] and yPos >= h - count - 1 and yPos <= h - 1)then
				for id, data in pairs(voids) do
					if(yPos == h - total + count - 1)then
						activateMenu(id)
						return true
					end
					count = count - 1
				end
			end
		end
	end
	return false
end

function drawScreen()
	term.clear()
	term.setBackgroundColor(colors.black)
	drawWallpaper()
	term.setBackgroundColor(colors.black)
	drawWindows()
	term.setBackgroundColor(colors.black)
	drawMenus()
	term.setBackgroundColor(colors.black)
	drawTaskBar()
	term.setBackgroundColor(colors.black)
	drawClock()
	term.setBackgroundColor(colors.black)
end

function deleteWindow(id)
	table.remove(order)
	windows[id] = nil
	return true
end

function getWindowId(name)
	for id, data in pairs(windows) do
		if(data['name'] == name)then
			return id
		end
	end
	return false
end

function getWindowSize(id)
	if windows[id] ~= nil then
		return windows[id]['width'], windows[id]['height']
	end
	return false
end

function getWindowPos(id)
	if windows[id] ~= nil then
		return windows[id]['xPos'], windows[id]['yPos'] + 1
	end
	return false
end

function addVoid(name, func)
	voids[voidid] = {}
	voids[voidid]["name"] = name
	voids[voidid]["func"] = func
	voids[voidid]["flash"] = false
	if(voidmenu['width'] < string.len(name))then
		voidmenu['width'] = string.len(name)
	end
	voidid = voidid + 1
end

function activateMenu(id)
	print(id)
	voids[id]['flash'] = true
	drawScreen()
	sleep(0.2)
	voids[id]['flash'] = false
	drawScreen()
	voids[id]['func']()
end

function makeIcon()
	-- Todo
end

function loadIcons()
	-- Todo
end

function drawIcon(id)
	-- Todo
end

function drawIcons()
	-- Todo
end

function checkIcons()
	-- Todo
end

function textBox(question)
	if textBoxOn == false then
		w, h = term.getSize()
		textBoxOn = true
		term.setBackgroundColor(colors.lightGray)
		term.setTextColor(colors.orange)
		width = string.len(question) + 2
		start = w / 2 - width / 2
		for x = start, start + width - 1 do
			for y = 5, 9 do
				term.setCursorPos(x, y)
				term.write(" ")
			end
		end
		term.setCursorPos(start + 1, 6)
		term.write(question)
		for x = start + 1, start + width - 2 do
			term.setBackgroundColor(colors.white)
			term.setCursorPos(x, 8)
			term.write(" ")
		end
		term.setCursorPos(start + 1, 8)
		term.setCursorBlink(true)
		answer = read()
		term.setCursorBlink(false)
		term.setBackgroundColor(colors.black)
		textBoxOn = false
		return answer
	else
		return false
	end
end

----------------
--  Menu API  --
----------------

function drawMenus()
	currentMenuPos = 1
	w, h = term.getSize()
	term.setBackgroundColor(colors.gray)
	for k = 1, w do
		term.setCursorPos(k, 1)
		term.write(" ")
	end
	for id, data in pairs(menus) do
		drawMenu(id)
	end
	currentMenuPos = 1
end

function checkMenus(posx, posy)
	currentMenuPos = 1
	for id, data in pairs(menus) do
		if(selectedMenu == id)then
			if(posx >= currentMenuPos and posx <= currentMenuPos + data['width'])then
				if(posy >= 1 and posy <= 1 + data['menuitems'])then
					if(posy > 1)then
						menuitempos = 1
						for mid, mdata in pairs(menui) do
							if(mdata['menuid'] == id)then
								if(posy - 1 == menuitempos)then
									clickMenuItem(mid)
									return true
								end
								menuitempos = menuitempos + 1
							end
						end
					else
						clickMenu(id)
						return true
					end
				end
			end
		else
			if(posx >= currentMenuPos and posx <= currentMenuPos + data['width'])then
				if(posy == 1)then
					clickMenu(id)
					return true
				end
			end
		end
		currentMenuPos = data['width'] + currentMenuPos + 2
	end
	return false
end

function clickMenu(ID)
	currentMenuPos = 1
	if(selectedMenu == ID)then
		selectedMenu = -1
	else
		selectedMenu = ID
	end
	drawScreen()
end

function clickMenuItem(ID)
	currentMenuPos = 1
	mi = menui[ID]
	flashMenuItem(ID)
	mi['func'](ID)
end

function flashMenuItem(ID)
	flashMenuItemID = ID
	drawMenus()
	sleep(0.2)
	flashMenuItemID = -1
	drawMenus()
end

function drawMenu(ID)
	menu = menus[ID]
	if(selectedMenu == ID)then
		term.setBackgroundColor(colors.red)
	else
		term.setBackgroundColor(colors.cyan)
	end
	term.setTextColor(colors.orange)
	term.setCursorPos(currentMenuPos, 1)
	term.write(menu['text'])
	if(menu['width'] >= string.len(menu['text']))then
		for k = currentMenuPos + string.len(menu['text']), currentMenuPos + string.len(menu['text']) + menu['width'] - string.len(menu['text']) do
			term.setCursorPos(k, 1)
			term.write(" ")
		end
	end
	if(selectedMenu == ID)then
		menuitempos = 1
		for mid, mdata in pairs(menui) do
			if(mdata['menuid'] == ID)then
				term.setCursorPos(currentMenuPos, 1 + menuitempos)
				term.setTextColor(colors.black)
				term.setBackgroundColor(colors.white)
				if(flashMenuItemID == mid)then
					term.setBackgroundColor(colors.red)
				end
				term.write(mdata['text'])
				if(menu['width'] >= string.len(mdata['text']))then
					for k = currentMenuPos + string.len(mdata['text']), currentMenuPos + string.len(mdata['text']) + menu['width'] - string.len(mdata['text']) do
						term.setCursorPos(k, 1 + menuitempos)
						term.write(" ")
					end
				end
				menuitempos = menuitempos + 1
			end
		end
	end
	currentMenuPos = currentMenuPos + menu['width'] + 2
end

function addMenu(text)
	menus[menuID] = {}
	menus[menuID]['width'] 			= string.len(text)
	menus[menuID]['text'] 			= text
	menus[menuID]['menuitems']		= 0
	menuID = menuID + 1
	return menuID - 1
end

function addMenuItem(text, menuid, func)
	if(menus[menuid] ~= nil)then
		menui[menuiID] = {}
		menui[menuiID]['text'] 			= text
		menui[menuiID]['menuid'] 		= menuid
		menui[menuiID]['func']			= func
		menuiID = menuiID + 1
		if(menus[menuid]['width'] < string.len(text))then
			menus[menuid]['width'] = string.len(text) - 1
		end
		menus[menuid]['menuitems'] = menus[menuid]['menuitems'] + 1
		return menuiID - 1
	end
end

function loop()
	drawScreen()
	while true do
		if(deleteWindowid > 0)then 
			deleteWindow(deleteWindowid)
			deleteWindowid = 0 
			drawScreen()
		end
		event, button, xPos, yPos = os.pullEvent()
		w, h = term.getSize()
		if event == "mouse_click" or event == "monitor_touch" then
			check = 0
			if(checkTaskBar(xPos, yPos) == false)then
				if(checkMenus(xPos, yPos) == false)then
					check = checkWindows(xPos, yPos)
				end
			end
			if(check > 0)then
				pressed = check
				grabx = xPos - windows[pressed]['xPos']
			else
				pressed = 0
			end
			if(os.clock() - lastclick >= .05 and os.clock() - lastclick <= 0.5)then
				checkIcons()
			end
			lastclick = os.clock()
			drawScreen()
		end
		if event == "mouse_drag" then
			if(pressed > 0)then
				windows[pressed]['xPos'] = xPos - grabx
				if(yPos < h and yPos > 1)then windows[pressed]['yPos'] = yPos end
				drawScreen()
			end
		end
		if event == "alarm" then
			drawClock()
			if(os.time() == 0)then
				drawScreen()
			end
		end
	end
end

function drawClock()
	w, h = term.getSize()
	term.setTextColor(colors.cyan)
	term.setBackgroundColor(colors.orange)
	tims = textutils.formatTime(os.time(), true)
	negative = string.len(tims .. "") - 1
	term.setCursorPos(w - negative, h)
	term.write(tims)
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
end

function clocky()
	while true do
		time = os.time()
		if(time < 23.99) then
			os.setAlarm(time + 0.01)
		else
			os.setAlarm(0)
		end
		sleep(0.1)
	end
end

function run()
	term.clear()
	term.setCursorPos(1,1)
	print("Checking for updates...")
	if(checkUpdate())then
		print("An update has been detected!")
		print("Would you like to update? (Yes/No)")
		write("> ")
		update = read()
	end
	if(update == "Yes" or update == "yes" or update == "Y" or update == "y")then
		fs.delete("startup")
		file = assert(io.open("/startup", "w"))
		file:write("shell.run('install')")
		file:close()
		os.reboot()
	else
		parallel.waitForAny(clocky, loop)
	end
end

function cleanScreen()
	term.setCursorPos(1, 1)
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	term.clear()
end

function quit()
	cleanScreen()
	print("Restart the computer to go back! (CTRL + R)")
	error()
end

function lua()
	cleanScreen()
	shell.run("lua")
	term.setCursorBlink(false)
end

function edit()
	file = textBox("Enter file name:")
	cleanScreen()
	shell.run("edit", file)
end

function paint()
	file = textBox("Enter file name:")
	cleanScreen()
	shell.run("paint", file)
end

function worm()
	cleanScreen()
	shell.run("worm")
end

function adventure()
	cleanScreen()
	shell.run("adventure")
end

function addotherwindow()
	makeWindow(10, 6, "Testing", 2, 10)
end

----------------
-- Population --
----------------

addVoid("Exit", quit)
addVoid("Shutdown", os.shutdown)
addVoid("Restart", os.reboot)

programs = addMenu("Programs")
games = addMenu("Games")
testing = addMenu("Testing")

addMenuItem("Lua", programs, lua)
addMenuItem("Edit", programs, edit)
addMenuItem("Paint", programs, paint)
addMenuItem("Worm", games, worm)
addMenuItem("Adventure", games, adventure)
addMenuItem("Add window", testing, addotherwindow)

----------------
----- Run ------
----------------

run()